# -*- coding: utf-8 -*-
"""Titanic_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vXojjGtvrRY-U6iiOyazag0Y-D_ZwtuN
"""

import pandas as pd

file_path = '/content/Titanic-Dataset.csv'
titanic_data = pd.read_csv(file_path)

print("First few rows of the dataset:")
print(titanic_data.head())
print("\nDataset Info:")
print(titanic_data.info())
print("\nStatistical Summary:")
print(titanic_data.describe())

import matplotlib.pyplot as plt
import seaborn as sns

print("\nMissing values in each column:")
print(titanic_data.isnull().sum())

sns.heatmap(titanic_data.isnull(), cbar=False, cmap='viridis')
plt.title("Missing Values in the Dataset")
plt.show()

titanic_data['Age'].fillna(titanic_data['Age'].median(), inplace=True)

titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

titanic_data.columns

if 'Cabin' in titanic_data.columns:
    titanic_data.drop(columns=['Cabin'], inplace=True)
    print("Column 'Cabin' dropped successfully.")
else:
    print("Column 'Cabin' not found in the DataFrame.")

titanic_data['Title'] = titanic_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())

print("\nMissing values after cleaning:")
print(titanic_data.isnull().sum())

titanic_data['FamilySize'] = titanic_data['SibSp'] + titanic_data['Parch'] + 1

titanic_data.loc[titanic_data['FamilySize'] > 1, 'IsAlone'] = 0

titanic_data['IsAlone'] = (titanic_data['FamilySize'] <= 1).astype(int)

titanic_data['Title'] = titanic_data['Name'].apply(lambda x: x.split(',')[1].split('.')[0].strip())

titanic_data['Title'] = titanic_data['Title'].replace(['Lady', 'Countess', 'Capt', 'Col',
                                                      'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')
titanic_data['Title'] = titanic_data['Title'].replace('Mlle', 'Miss')
titanic_data['Title'] = titanic_data['Title'].replace('Ms', 'Miss')
titanic_data['Title'] = titanic_data['Title'].replace('Mme', 'Mrs')

titanic_data['Sex'] = titanic_data['Sex'].map({'male': 0, 'female': 1})

titanic_data = pd.get_dummies(titanic_data, columns=['Embarked'], drop_first=True)

titanic_data = pd.get_dummies(titanic_data, columns=['Title'], drop_first=True)

titanic_data.drop(columns=['Name', 'Ticket', 'PassengerId'], inplace=True)

print("\nDataset after Feature Engineering:")
print(titanic_data.head())

sns.countplot(x='Survived', data=titanic_data)
plt.title("Survival Count")
plt.show()

sns.barplot(x='Sex', y='Survived', data=titanic_data)
plt.title("Survival by Sex")
plt.show()

sns.barplot(x='Pclass', y='Survived', data=titanic_data)
plt.title("Survival by Ticket Class")
plt.show()

sns.barplot(x='FamilySize', y='Survived', data=titanic_data)
plt.title("Survival by Family Size")
plt.show()

plt.figure(figsize=(10,8))
sns.heatmap(titanic_data.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Feature Correlation Heatmap")
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

X = titanic_data.drop(columns=['Survived'])
y = titanic_data['Survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("\nModel Accuracy:")
print(accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

import numpy as np

importances = model.feature_importances_
indices = np.argsort(importances)[::-1]

print("\nFeature ranking:")

for i in range(X.shape[1]):
    print(f"{i + 1}. Feature {X.columns[indices[i]]} ({importances[indices[i]]:.4f})")

plt.figure(figsize=(10,6))
plt.title("Feature Importances")
plt.bar(range(X.shape[1]), importances[indices], align="center")
plt.xticks(range(X.shape[1]), X.columns[indices], rotation=90)
plt.show()

predictions = model.predict(X_test)

print(titanic_data.columns)

original_data = pd.read_csv('/content/Titanic-Dataset.csv')

titanic_data = pd.merge(titanic_data, original_data[['PassengerId']], left_index=True, right_index=True) # Use 'original_data' instead of 'original_titanic'

original_data = pd.read_csv('/content/Titanic-Dataset.csv')
titanic_data = pd.merge(titanic_data, original_data[['PassengerId']], left_index=True, right_index=True)

submission = pd.DataFrame({
    'PassengerId': titanic_data['PassengerId'],
    'Survived': predictions
})

submission = pd.DataFrame({
    'PassengerId': titanic_data['PassengerId'],
    'Survived': predictions
})

submission.to_csv('titanic_predictions.csv', index=False)